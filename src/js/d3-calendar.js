define(function(require, exports, module) {

    var D3Calendar = function(_, d3, moment) {

        //Some useful constants
        var outputFormat = "YYYY-MM-DD",
            daysOfWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            eventEmitter = d3.dispatch('dateClick', 'draw'),
            svg, calendarOptions;

        //D3 constants
        var xScale = d3.scale.linear()
            .domain([1, 8]);

        var yScale = d3.scale.linear()
            .domain([1, 7]);

        var calendarGroup;

        var exports = function(selectedSvg, options) {
            svg = selectedSvg;
            calendarOptions = options;

            calendarGroup = svg.append("g").classed("d3Calendar", true);

            return;
        };

        eventEmitter.on('draw', function(startDate, selectedDates) {
            xScale.range([calendarOptions.x.min, calendarOptions.x.max]);
            yScale.range([calendarOptions.y.min, calendarOptions.y.max]);

            var rectWidth = xScale(2) - xScale(1);
            var rectHeight = yScale(2) - yScale(1);

            exports.generateMonthsDays(startDate, function(days){
                exports.computeIndexes(startDate, days, function(indexedDays){

                    //Add all rect days to calendar
                    calendarGroup.selectAll("rect").data(indexedDays).enter()
                        .append("rect")
                            .attr("class", "date")
                            .attr("x", function(d, i){
                                var position = exports.computeRowColumnFromIndex(d.index);
                                return xScale(position.col);
                            })
                            .attr("y", function(d, i){
                                var position = exports.computeRowColumnFromIndex(d.index);
                                return yScale(position.row);
                            })
                            .attr("width", rectWidth)
                            .attr("height", rectHeight)
                            .attr("day", function(d) { return d.date })
                            .attr("row", function(d) {
                                var position = exports.computeRowColumnFromIndex(d.index);
                                return position.row;
                            })
                            .attr("col", function(d) {
                                var position = exports.computeRowColumnFromIndex(d.index);
                                return position.col;
                            })
                            .on('click', function(e) {
                                var self = d3.select(this);
                                eventEmitter.dateClick(self.attr("day"))
                            })

                    //Add text days to calendar

                    //Add calendar month to calendar

                })
            })

        });

        /* Returns closured eventEmitter.
         */
        exports.emitter = function(){
            return eventEmitter;
        }

        /* Returns computed calendar row and column from given index
         */
        exports.computeRowColumnFromIndex = function(index) {
            return {
                row: Math.floor((index-1 )/ 7) + 1,
                col: ((index-1) % 7) + 1
            }
        };

        /* Returns dateObjs with calendar position index using first of month to generate
         * index offset. Mutates given dateObjs.
         */
        exports.computeIndexes = function(firstOfMonth, dateObjs, cb) {
            var dayOfFirstOfMonth = moment(firstOfMonth).format("dddd"),
            offset = _.indexOf(daysOfWeek, dayOfFirstOfMonth);

            dateObjs.map(function(dateObj) {
                dateObj.index = parseFloat(dateObj.moment.format("D")) + offset
            })

            cb(dateObjs);
        };

        /* Takes array of date objects generated by generateMonthsDays and returns
         * hash table of days grouped by day of the week
         */
        exports.groupByDay = function(dateObjs, cb) {

            var res = _.object(daysOfWeek, daysOfWeek.map(function() { return []}));

            var query = dateObjs.reduce(function(acc, next) {
                acc[next.moment.format("dddd")].push(next);
                return acc
            }, res);

            cb(query);
        };

        /* Takes ISOString for first of the month and generates array of date
         * objects representing each day of the month.
         */
        exports.generateMonthsDays = function(startDate, cb, acc) {
            var startingDay = moment(startDate),
                nextDay = moment(startDate).add(1, 'days'),
                lastDayOfMonth = moment(startDate).endOf("month").startOf("day"),
                accumulator = acc ? acc : [];

            var startDateObj = {
                date: startingDay.format(outputFormat),
                moment: startingDay
            };

            // If we're on the last day of the month
            if (startingDay.isSame(lastDayOfMonth)){
                cb(accumulator.concat([startDateObj]));
                return;
            }
            exports.generateMonthsDays(nextDay.format(outputFormat), cb, accumulator.concat([startDateObj]));
        };

         return exports;
    };

    module.exports = D3Calendar
});
